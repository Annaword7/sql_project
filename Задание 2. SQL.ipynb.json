{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 2. SQL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Импортируем библиотеки, настроим коннекшн с Clikhouse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandahouse as ph\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "connection_default = {'host': 'http://clickhouse.beslan.pro:8080',\n",
    "                      'database':'default',\n",
    "                      'user':'student', \n",
    "                      'password':'dpo_python_2020'\n",
    "                     }"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "2.1 Очень усердные ученики.Условие\n",
    "\n",
    "Образовательные курсы состоят из различных уроков, каждый из которых состоит из нескольких маленьких заданий. Каждое такое маленькое задание называется \"горошиной\".\n",
    "Назовём очень усердным учеником того пользователя, который хотя бы раз за текущий месяц правильно решил 20 горошин."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ЗАДАНИЕ:\n",
    "Необходимо написать оптимальный запрос, который даст информацию о количестве очень усердных студентов за март 2020 года."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Посмотрим, какие даты вообще есть в датасете:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MONTH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MONTH\n",
       "0     10"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q1 = '''\n",
    " \n",
    "    SELECT \n",
    "--   DISTINCT YEAR((timest)) AS YEAR, \n",
    "    DISTINCT MONTH((timest)) AS MONTH \n",
    "       \n",
    "    FROM peas \n",
    " \n",
    "'''\n",
    "\n",
    "q_test1 = ph.read_clickhouse(query=q1, connection=connection_default)\n",
    "q_test1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR\n",
       "0  2021"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q2 = '''\n",
    " \n",
    "    SELECT \n",
    "--   DISTINCT MONTH((timest)) AS MONTH, \n",
    "    DISTINCT YEAR((timest)) AS YEAR \n",
    "       \n",
    "    FROM peas \n",
    " \n",
    "'''\n",
    "\n",
    "q_test2 = ph.read_clickhouse(query=q2, connection=connection_default)\n",
    "q_test2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Очевидно, что отвечая на вопрос по заданию - нет данных по студентам за март 2020 года. Но можно посомтреть запрос за октябрь 2021, а также написать запрос, который будет отвечать на вопрос по текущему месяцу и году"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Посмотрим какие студенты были усердными в октябре 2021 года\n",
    "q10 = '''\n",
    "SELECT DISTINCT(st_id)\n",
    "FROM\n",
    "\n",
    "        (\n",
    "        SELECT st_id, subject, sum(correct) as Sum_of_correct \n",
    "\n",
    "        FROM \n",
    "            (\n",
    "            SELECT *  FROM peas\n",
    "\n",
    "            WHERE MONTH(timest) == 10\n",
    "            AND YEAR(timest) = 2021\n",
    "            )\n",
    "\n",
    "        GROUP BY st_id, subject\n",
    "        )\n",
    "\n",
    "WHERE Sum_of_correct > 20\n",
    "\n",
    "   '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>st_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>219630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>413417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>937983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>700123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>737855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>287212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>790472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>750680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>651464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>582593</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>65 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     st_id\n",
       "0   219630\n",
       "1   413417\n",
       "2   937983\n",
       "3   700123\n",
       "4   737855\n",
       "..     ...\n",
       "60  287212\n",
       "61  790472\n",
       "62  750680\n",
       "63  651464\n",
       "64  582593\n",
       "\n",
       "[65 rows x 1 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q_test10 = ph.read_clickhouse(query=q10, connection=connection_default)\n",
    "q_test10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Посмотрим какие студенты были активные в текущем месяце - август 2022 года\n",
    "q12 = '''\n",
    "SELECT DISTINCT(st_id)\n",
    "FROM\n",
    "\n",
    "        (\n",
    "        SELECT st_id, subject, sum(correct) as Sum_of_correct \n",
    "\n",
    "        FROM \n",
    "            (\n",
    "            SELECT *  FROM peas\n",
    "\n",
    "            WHERE MONTH(timest) == MONTH(now())\n",
    "            AND YEAR(timest) = YEAR(now())\n",
    "            )\n",
    "\n",
    "        GROUP BY st_id, subject\n",
    "        )\n",
    "\n",
    "WHERE Sum_of_correct > 20\n",
    "\n",
    "   '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>st_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [st_id]\n",
       "Index: []"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q_test12 = ph.read_clickhouse(query=q12, connection=connection_default)\n",
    "q_test12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.2 Оптимизация воронки"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Условие\n",
    "\n",
    "Образовательная платформа предлагает пройти студентам курсы по модели trial: студент может решить бесплатно лишь 30 горошин в день. Для неограниченного количества заданий в определенной дисциплине студенту необходимо приобрести полный доступ. Команда провела эксперимент, где был протестирован новый экран оплаты."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Необходимо в одном запросе выгрузить следующую информацию о группах пользователей:\n",
    "\n",
    "ARPU \n",
    "ARPAU \n",
    "CR в покупку \n",
    "СR активного пользователя в покупку \n",
    "CR пользователя из активности по математике (subject = ’math’) в покупку курса по математике\n",
    "ARPU считается относительно всех пользователей, попавших в группы.\n",
    "\n",
    "Активным считается пользователь, за все время решивший больше 10 задач правильно в любых дисциплинах.\n",
    "\n",
    "Активным по математике считается пользователь, за все время решивший 2 или больше задач правильно по математике."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "q11 = '''\n",
    "         SELECT  test_grp, \n",
    "        AVG (money) AS ARPU,\n",
    "        SUM (money) / COUNT (st_id) AS ARPU_another_way,\n",
    "        SUM (money) / SUM (active_user) AS ARPAU,\n",
    "        COUNT(IF (money>0, 1, NULL)) / COUNT (st_id) AS CR,\n",
    "        COUNT(IF (money>0, 1, NULL)) / COUNT (IF (active_user>0, 1, NULL)) AS CR_active,\n",
    "        COUNT(IF (subject == 'Math', 1, NULL)) / COUNT (Active_math_student) AS CR_math\n",
    "        \n",
    "   FROM (\n",
    "     SELECT st_id, Amount_of_right_tasks, test_grp, sale_time, money, subject, active_user, Active_math_student\n",
    "     FROM (\n",
    "     \n",
    "        SELECT st_id, Amount_of_right_tasks, test_grp, sale_time, money, subject, if(Amount_of_right_tasks>10, 1, 0) AS active_user FROM\n",
    "            (\n",
    "            SELECT st_id, Amount_of_right_tasks, test_grp FROM\n",
    "                    (\n",
    "                    SELECT st_id, SUM(correct) AS Amount_of_right_tasks\n",
    "                        FROM peas\n",
    "                        GROUP BY st_id\n",
    "                    ) AS l\n",
    "                JOIN\n",
    "                    (\n",
    "                    SELECT * FROM studs\n",
    "                    ) AS r\n",
    "                ON l.st_id = r.st_id \n",
    "                \n",
    "            ) AS l\n",
    "                LEFT JOIN\n",
    "                (\n",
    "                SELECT * FROM final_project_check\n",
    "                ) AS r\n",
    "                ON l.st_id = r.st_id\n",
    "            ) as A\n",
    "            LEFT JOIN\n",
    "            (     SELECT st_id, IF(active_math > 2, 1,0) AS   Active_math_student\n",
    "     FROM\n",
    "      \n",
    "        (\n",
    "        SELECT st_id, count(subject == 'math') AS active_math FROM peas\n",
    "        WHERE correct == 1\n",
    "        GROUP BY st_id\n",
    "        )) as B\n",
    "        ON A.st_id = B.st_id\n",
    "         )  \n",
    "    \n",
    "     \n",
    "     GROUP BY (test_grp)\n",
    "\n",
    "    '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_grp</th>\n",
       "      <th>ARPU</th>\n",
       "      <th>ARPU_another_way</th>\n",
       "      <th>ARPAU</th>\n",
       "      <th>CR</th>\n",
       "      <th>CR_active</th>\n",
       "      <th>CR_math</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>control</td>\n",
       "      <td>8244.047619</td>\n",
       "      <td>8244.047619</td>\n",
       "      <td>10653.846154</td>\n",
       "      <td>0.107143</td>\n",
       "      <td>0.138462</td>\n",
       "      <td>0.047619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>pilot</td>\n",
       "      <td>21201.298701</td>\n",
       "      <td>21201.298701</td>\n",
       "      <td>30801.886792</td>\n",
       "      <td>0.266234</td>\n",
       "      <td>0.386792</td>\n",
       "      <td>0.103896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  test_grp          ARPU  ARPU_another_way         ARPAU        CR  CR_active  \\\n",
       "0  control   8244.047619       8244.047619  10653.846154  0.107143   0.138462   \n",
       "1    pilot  21201.298701      21201.298701  30801.886792  0.266234   0.386792   \n",
       "\n",
       "    CR_math  \n",
       "0  0.047619  \n",
       "1  0.103896  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q_test11 = ph.read_clickhouse(query=q11, connection=connection_default)\n",
    "q_test11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
